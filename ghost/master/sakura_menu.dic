
//MENUS!

//quick back
nvm{
	"\n[half]You have %TOINT(pancakes) pancakes.\n\n[half]\![*]\q[Nevermind,OnBlank]   \![*]\q[Main Menu,OnMainMenu]"	
}

blank{
	inmenu = 0
}

SakuraMenuGreetings : nonoverlap
{
	"Hello."
	"How can I help you?"
}

//Because there is an all modifier here, you don't need to write -- between menu options
OnMainMenu : all
{
	inmenu = 1
	"\C\![lock,balloonrepaint]\c\_q%(shelf)%(tallstack)\b[0]\![set,autoscroll,disable]\f[height,%fontheight]"
//	if SHIORI3FW.Eventid == "OnMouseDoubleClick"; SakuraMenuGreetings //The check here is so they won't comment if you click the back button. Remove if you prefer
	
	
	"\![*]\q[Talk to me,OnAiTalk]"
	if LastTalk != ""; "  \![*]\q[Say that again,OnLastTalk]"
	"\n\n"
	"\![*]\q[Tools,OnToolsMenu]         \![*]\q[Upgrades,OnUpgradesMenu]\n"	
	"\![*]\q[Shinies,OnShiniesMenu]       \![*]\q[Additions,OnAdditionsMenu]\n"
	
	if toolsarray[3] > 0 || toolsarray[4] > 0 || toolsarray[5] > 0 || toolsarray[6] > 0; "\n[half]\![*]\q[Reincarnate,OnReset]\n"
	"\n"

	
	"\![*]\q[Settings,OnSettingsMenu]     \![*]\q[Nevermind,OnBlank]\n\n"

	"\f[align,center]~~~~~~~~~~~~~~~~~\nPancakes: %TOINT(pancakes) Per Click: %FormatTwoDec(clickmultiplier)\n%FormatTwoDec(getSecCakes) pancakes per sec\n%(phoneFriendAmt(toolsarray[0])) helping click"
	"\e"
}

OnBlank{
	inmenu = 0
}

OnChoiceTimeOut{
	inmenu = 0
}

OnBalloonTimeOut{
	inmenu = 0
}

phoneFriendAmt{
	if _argv[0] == 1{
		"1 friend"
		"1 kid"
	}else{
		"%_argv[0] friends"
		"%_argv[0] friends' kids"
	}

}

OnLastTalk
{
	LastTalk
}

OnTalkRateMenu : all
{	
	//This is just setting up a label, you may need to add to it or tweak it if you change what rates are available
	_talkrate = "Off"
	if aitalkinterval == 30; _talkrate = "30 seconds"
	elseif aitalkinterval == 60; _talkrate = "1 minute"
	elseif aitalkinterval == 180; _talkrate = "3 minutes"
	elseif aitalkinterval == 300; _talkrate = "5 minutes"
	elseif aitalkinterval == 600; _talkrate = "10 minutes"
	
	"%(tallstack)\b[0]\![set,autoscroll,disable]\_q"
	"Current interval: %(_talkrate)\n\n"
	
	"\![*]\q[Off,OnTalkRateChange,0]\n"
	"\![*]\q[30 seconds,OnTalkRateChange,30]\n"
	"\![*]\q[1 minute,OnTalkRateChange,60]\n"
	"\![*]\q[3 minutes,OnTalkRateChange,180]\n"
	"\![*]\q[5 minutes,OnTalkRateChange,300]\n"
	"\![*]\q[10 minutes,OnTalkRateChange,600]\n"
	"\n"
	"\![*]\q[Back,OnSakuraMenu]  \![*]\q[Nevermind,blank]"
}


OnTalkRateDisplay : all
{	

	if aitalkinterval == 30{
	"\q[☐Off,OnTalkRateChange,0] "
	"\q[☑30s,OnTalkRateChange,30] "
	"\q[☐1m,OnTalkRateChange,60] "
	"\q[☐3m,OnTalkRateChange,180] "
	"\q[☐5m,OnTalkRateChange,300] "
	"\q[☐10m,OnTalkRateChange,600] "
	} 
	elseif aitalkinterval == 60{
	"\q[☐Off,OnTalkRateChange,0] "
	"\q[☐30s,OnTalkRateChange,30] "
	"\q[☑1m,OnTalkRateChange,60] "
	"\q[☐3m,OnTalkRateChange,180] "
	"\q[☐5m,OnTalkRateChange,300] "
	"\q[☐10m,OnTalkRateChange,600] "
	} 
	elseif aitalkinterval == 180{
	"\q[☐Off,OnTalkRateChange,0] "
	"\q[☐30s,OnTalkRateChange,30] "
	"\q[☐1m,OnTalkRateChange,60] "
	"\q[☑3m,OnTalkRateChange,180] "
	"\q[☐5m,OnTalkRateChange,300] "
	"\q[☐10m,OnTalkRateChange,600] "
	} 
	elseif aitalkinterval == 300{
	"\q[☐Off,OnTalkRateChange,0] "
	"\q[☐30s,OnTalkRateChange,30] "
	"\q[☐1m,OnTalkRateChange,60] "
	"\q[☐3m,OnTalkRateChange,180] "
	"\q[☑5m,OnTalkRateChange,300] "
	"\q[☐10m,OnTalkRateChange,600] "
	} 
	elseif aitalkinterval == 600{
	"\q[☐Off,OnTalkRateChange,0] "
	"\q[☐30s,OnTalkRateChange,30] "
	"\q[☐1m,OnTalkRateChange,60] "
	"\q[☐3m,OnTalkRateChange,180] "
	"\q[☐5m,OnTalkRateChange,300] "
	"\q[☑10m,OnTalkRateChange,600] "
	}else{
	"\q[☑Off,OnTalkRateChange,0] "
	"\q[☐30s,OnTalkRateChange,30] "
	"\q[☐1m,OnTalkRateChange,60] "
	"\q[☐3m,OnTalkRateChange,180] "
	"\q[☐5m,OnTalkRateChange,300] "
	"\q[☐10m,OnTalkRateChange,600] "
	}
	
	
	//☐30s ☐1m ☑3m ☐5m ☐10m
	
	"\n"
}


OnTalkRateChange
{
	aitalkinterval = TOINT(reference0)
	OnSettingsMenu
}




OnSettingsMenu{
	"\C\![lock,balloonrepaint]\c\_q%(shelf)%(tallstack)\b[0]\![set,autoscroll,disable]"
	--
	"Font Size: \q[ - ,OnDecFont]%fontheight\q[ + ,OnIncFont] \n"
	--
	if clicktype == 0{
		"Click Type: \![*]\q[Single,OnFlipClickType]"
	}else{
		"Click Type: \![*]\q[Double,OnFlipClickType]"
	}
	--
	"\n"
	--
	if goreallowed == 0{
		"Gore Allowed: \![*]\q[Off,OnFlipGore]"
	}else{
		"Gore Allowed: \![*]\q[On,OnFlipGore]"
	}
	--
	"\n"
	--
	if columnoverride == 0{
		"Column Override: \![*]\q[Off,OnFlipColumns]"
	}else{
		"Column Override: \![*]\q[On,OnFlipColumns]"
	}
	--
	"\nTalk Rate:\n%(OnTalkRateDisplay)"
	--
	"\n\![*]\q[Hard Reset to 0,OnHardReset]\n"
	--
	if incarnations > 1{
		"(You're on run number %incarnations.)"
	}
	--
	"\n\n[half]%(nvm)     \![*]\q[Back,OnMainMenu]"
	

}

OnDecFont{
	if "-" _in_ fontheight{
		fontheight = REPLACE(fontheight,"-","")
		fontheight = TOINT(fontheight)
		fontheight++
		if fontheight != 0{
			fontheight = "-" + fontheight
		}else{
			fontheight = "+0"
		}

	}else{
		fontheight = REPLACE(fontheight,"+","")
		fontheight = TOINT(fontheight)
		fontheight--
		
		if fontheight == -1{
			fontheight = "-1"
		}elseif fontheight != 0{
			fontheight = "+" + fontheight
		}else{
			fontheight = "+0"
		}
	}
	OnSettingsMenu
}

OnIncFont{
	if "-" _in_ fontheight{
		fontheight = REPLACE(fontheight,"-","")
		fontheight = TOINT(fontheight)
		fontheight--
		if fontheight != 0{
			fontheight = "-" + fontheight
		}else{
			fontheight = "+0"
		}

	}else{
		fontheight = REPLACE(fontheight,"+","")
		fontheight = TOINT(fontheight)
		fontheight++

		if fontheight != 1{
			fontheight = "+" + fontheight
		}else{
			fontheight = "+1"
		}
	}
	OnSettingsMenu
}

OnFlipClickType{
	if clicktype == 0{
		clicktype = 1
	}else{
		clicktype = 0
	}
	OnSettingsMenu
}

OnFlipGore{
	if goreallowed == 0{
		goreallowed = 1
	}else{
		goreallowed = 0
	}
	OnSettingsMenu
}


OnFlipColumns{
	if columnoverride == 0{
		columnoverride = 1
	}else{
		columnoverride = 0
	}
	OnSettingsMenu
}


OnReset{
	"\_qAre you sure?\n"
	--
	"\n\![*]\q[Reset,OnResetConfirm]"
	--
	"\n\n[half]%(nvm)     \![*]\q[Back,OnMainMenu]"
	
}

OnResetConfirm{
	
	OnFirstBoot_Reset

}

OnHardReset{
	"\_qAre you sure? This means all previous runs will be forgotten.\n"
	--
	"\n\![*]\q[Hard Reset,OnHardResetConfirm]"
	--
	"\n\n[half]%(nvm)     \![*]\q[Back,OnMainMenu]"
	
}

OnHardResetConfirm{
	
	OnFirstBoot

}






//OLD AND DEPRECATED
/*
OnUpgradesMenu : all {
	"\C\![lock,balloonrepaint]\c\_q%(shelf)%(tallstack)"
	inmenu = 2
	for _i = 0; _i < ARRAYSIZE(UpgradeData); _i++{
		_thisitem = IARRAY
		_thisitem = UpgradeData[_i]
		//"%_thisitem\n"
		if upgradearray[_i] == 0 {
			//if the user has not bought any
				
			if pancakes >= TOINT(_thisitem[3] * (upgradearray[_i]+1)){
				//can buy it
				"\![*]\q[Buy %(_thisitem[0]),OnBuyUpgrade,%_i] for %TOINT(_thisitem[3]*(upgradearray[_i]+1)) \n"
			}else{
				//broke
				"Buy %(_thisitem[0]) for %TOINT(_thisitem[3]*(upgradearray[_i]+1)) \n"
			}
			
		}else { //bought
			"Owned: %(_thisitem[0])\n"
			
		}
	
	}

	
	"\n[half]%(nvm)    \![*]\q[Refresh,OnUpgradesMenu]"

}

*/




OnUpgradesMenu : all {
	"\C\![lock,balloonrepaint]\c\_q%(shelf)%(tallstack)\b[2]\![set,autoscroll,disable]\f[align,center]\f[height,%fontheight]\f[height,+3]\f[bold,1]~UPGRADES~\f[height,-3]\f[bold,0]\n\n"
	inmenu = 2
	
	//\q[%(_this[0]),OnUpgradeInfo,%_subdbname,%(_i-1)]
	//\__q[OnUpgradeInfo,%_subdbname,%(_i)]\![*]\__q
	

	for _i = 0; _i < ARRAYSIZE(UpgradeDatabases); _i++{
		_database = UpgradeDatabases[_i]
		//_thisitem = ToolsData[_i]
		_offset = 17 * ((_i) % 2)
		
		
		_current = TOINT(upgradelevels[_i])
		_subdbname = _database[1]
		_next = EVAL("%_subdbname[%_current]")
		_this = EVAL("%_subdbname[%(_current-1)]")
		
		_unlocked = EVAL("%_database[3]")
		
		if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em,@-1.5em]"
		
		if _current > 0{
			"\f[align,left]\f[bold,1]  %_database[0]\f[bold,0] (Level %_current)\n"
		}else{
			"\f[align,left]\f[bold,1]  %_database[0]\f[bold,0] \n"
		}
		
		
		if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"

		if _unlocked == 0{
		
			"        ??????????\n[-25]"
			if checkColumnSetup && _i % 2 == 0{
				"\n[-50]"
			}else{
				"\n"
			}
			
		}else{
			if _current == ARRAYSIZE(EVAL(_database[1])){
				if checkColumnSetup && _i % 2 == 0; "\_l[%(_offset)em]"
				"     Owns: \q[%(_this[0]),OnUpgradeInfo,%_subdbname,%(_i)] "
				
				if checkColumnSetup && _i % 2 == 1{
					"\n\_l[%(_offset)em,@0]      (Maxed Out)"
				} else{
					"\n      (Maxed Out)\n[-200]"
				}
		
				
				
			}
			elseif _this != ""{
				if checkColumnSetup && _i % 2 == 0; "\_l[%(_offset)em]"
				if pancakes >= TOINT(_next[3]){
					"     Owns: \q[%(_this[0]),OnUpgradeInfo,%_subdbname,%(_i)]\n"
					if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
					"     \__q[OnNextUpgradeInfo,%_subdbname,%(_i)]\![*]\__q\q[Buy %(_next[0]),%_database[2],%_current]"
				}else{
					"     Owns: \q[%(_this[0]),OnUpgradeInfo,%_subdbname,%(_i)]\n"
					if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
					"     \__q[OnNextUpgradeInfo,%_subdbname,%(_i)]\![*]\__q\f[color,disable]Buy %(_next[0])\f[color,default]"
				}
				if checkColumnSetup && _i % 2 == 0;"\_l[@0,@-2.5em]"
				
				
			}else{
				if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
				if pancakes >= TOINT(_next[3]){
					"      \![*]\q[Buy %(_next[0]),%_database[2],%_current]"
				}else{
					"      \![*]\f[color,disable]Buy %(_next[0])\f[color,default]"
				}
				if checkColumnSetup && _i % 2 == 0{
					"\_l[@0,@-1em]"
				}else{
					"\n[50]"
				}
			}
		}
		
		"\n\n[40]"

	
	}
	
	
	
	
	
	
	
	
	"\n\n[half]%(nvm)    \![*]\q[Refresh,OnUpgradesMenu]"

}

OnBuySpoonUpgrade{
	_thisupgrade = SpoonUpgradeData[TOINT(reference0)]
	_spooncost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _spooncost
	upgradelevels[0] = TOINT(upgradelevels[0]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyEggUpgrade{
	_thisupgrade = EggUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[1] = TOINT(upgradelevels[1]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyPanUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[2] = TOINT(upgradelevels[2]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyHatUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[3] = TOINT(upgradelevels[3]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}


OnBuyBatUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[4] = TOINT(upgradelevels[4]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}


OnBuyGooglyUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[5] = TOINT(upgradelevels[5]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyBalloonUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[6] = TOINT(upgradelevels[6]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuySummoningUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[7] = TOINT(upgradelevels[7]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyPlaqueUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[8] = TOINT(upgradelevels[8]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyNeedleUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[9] = TOINT(upgradelevels[9]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}

OnBuyBellUpgrade{
	_thisupgrade = PanUpgradeData[TOINT(reference0)]
	_cubecost = TOINT(_thisupgrade[3])
	_effect = _thisupgrade[6]
	pancakes -= _cubecost
	upgradelevels[10] = TOINT(upgradelevels[10]) + 1
	--
	_dummy = EVAL(_effect)
	"%(OnUpgradesMenu)"
}



//refercne1 is index, reference0 is subdbname
OnUpgradeInfo : all {
	"\_q"
	_stage = upgradelevels[TOINT(reference1)] - 1
	_thisitem = EVAL("%(reference0)[%_stage]")
	//"%_stage\n%_thisitem"
	"\f[bold,1]%_thisitem[0] \f[bold,0](Stage %(_stage+1))\n\n[half]"
	"%_thisitem[7]\n\n[half]"
	
	"\n%(nvm)   \![*]\q[Back,OnUpgradesMenu]"

}


//refercne1 is index, reference0 is subdbname
OnNextUpgradeInfo : all {
	"\_q"
	_stage = upgradelevels[reference1]
	_thisitem = EVAL("%(reference0)[%_stage]")
	//"%_stage\n%_thisitem"
	"\f[bold,1]%_thisitem[0] \f[bold,0]\n\n[half]"
	"%_thisitem[7]\n\n[half]"
	
	"\n%(nvm)   \![*]\q[Back,OnUpgradesMenu]"

}



 

OnBuyUpgrade{
	_index = TOINT(reference0)
	_thisitem = IARRAY
	_thisitem = UpgradeData[_index]
	upgradearray[_index] = 1
	pancakes -= TOINT(_thisitem[3])
	
	//change click multiplier
	clickmultiplier = TOREAL(clickmultiplier + TOREAL(TOREAL(_thisitem[2])/100))
	
	"%(OnUpgradesMenu)\![unlock,balloonrepaint]"
}


//will use checkColumnSetup


OnToolsMenu : all {
	"\C\![lock,balloonrepaint]\c\_q%(shelf)%(tallstack)\b[2]\f[height,%fontheight]\![set,autoscroll,disable]"
	"\f[align,center]\f[height,+3]\f[bold,1]~TOOLS~\f[bold,0]\f[height,-3]\n\f[align,left]"
	inmenu = 3
	//HANDLE PHONE
	_thisitem = ToolsData[0]
	if toolsarray[0] > 0 {
		//if the user has at least 1
		"\f[bold,1]\__q[OnToolInfo,0]\![*]\__q%(toolsarray[0]) Phones\f[bold,0]\n"
		"   (%TOINT(_thisitem[2]*(toolsarray[0]+1)) apiece)\n"
		if pancakes >= TOINT(_thisitem[2] * (toolsarray[0]+1)){
			//can buy more
			"\q[ - ,OnSellTool,1,0] \q[ -- ,OnSellTool,10,0] Buy \q[ + ,OnBuyTool,1,0] \q[ ++ ,OnBuyTool,10,0]\n"
		}else{
			//broke
			"\q[ - ,OnSellTool,1,0] \q[ -- ,OnSellTool,10,0] Buy \f[color,disable] +   ++ \f[color,default]\n"
		}
		
	}elseif pancakes >= TOINT(_thisitem[2]){ //affordable and none
		//not unlocked
			"\![*]\q[Phone A Friend,OnPhoneBuy,0] for %TOINT(_thisitem[2])\n"
		
	}else{
		"\f[bold,1]You Can't Afford To Fix Your Phone\f[bold,0]\n"
	}
	if checkColumnSetup; "\_l[15em,1.5em]"
	
	
	//\__q[OnToolInfo,%_i]\![*]\__q
	
	//HANDLE REST
	for _i = 1; _i < ARRAYSIZE(ToolsData); _i++{
		_thisitem = ToolsData[_i]
		_nextitem = ToolsData[_i+1]
		_offset = 15 * (_i % 2)
		if toolsarray[_i] > 0 {
			//if the user has at least 1
				//if the user has at least 1
			if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
			
			"\f[bold,1]\__q[OnToolInfo,%_i]\![*]\__q%(toolsarray[_i]) %(_thisitem[0])\f[bold,0]\n"
			
			
			if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
			
			"    (%TOINT(_thisitem[2]*(toolsarray[_i]+1)) apiece)\n"
			
			if pancakes >= TOINT(_thisitem[2] * (toolsarray[_i]+1)){
				//can buy more
				if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
				"\q[ - ,OnSellTool,1,%_i] \q[ -- ,OnSellTool,10,%_i] Buy \q[ + ,OnBuyTool,1,%_i] \q[ ++ ,OnBuyTool,10,%_i]\n\n[half]"
				if checkColumnSetup && _i % 2 == 0;"\_l[@0,@-3.5em]"
			}else{
				//broke
				if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
				"\q[ - ,OnSellTool,1,%_i] \q[ -- ,OnSellTool,10,%_i] Buy \f[color,disable] +   ++ \f[color,default]\n\n[half]"
				if checkColumnSetup && _i % 2 == 0;"\_l[@0,@-3.5em]"
			}
			
			
		}elseif pancakes >= TOINT(_thisitem[2]){ //affordable and none
			//not unlocked
			
				
				if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
				
					"\![*]\q[Buy %(_thisitem[0]),OnBuyTool,1,%_i]\n"
				
				if checkColumnSetup && _i % 2 == 1; "\_l[%(_offset)em]"
					"    (%TOINT(_thisitem[2]*(toolsarray[_i]+1)) pancakes)\n"
				
				if  pancakes >= TOINT(_nextitem[2]){
					if checkColumnSetup && _i % 2 == 0{
						"\_l[@0,@-2em]"
					}else{
						"\n"
					}
					
				}else{
				//	"\_l[@0,@1em]"
				}
				
		}else{
		//	"????\n"
		}
	
	}
	"\n\n%(nvm)    \![*]\q[Refresh,OnToolsMenu]"

}

OnBuyTool{
	_index = TOINT(reference1)
	_amt = TOINT(reference0)
	_thisitem = ToolsData[_index]
	
	while _amt > 0 && pancakes > TOINT(_thisitem[2] * toolsarray[_index]){
			pancakes -= TOINT(_thisitem[2] * toolsarray[_index])
			toolsarray[_index] = (TOINT(toolsarray[_index]) + 1)
			_amt--
	}

	"%(OnToolsMenu)\![unlock,balloonrepaint]"

}

OnSellTool{
	_index = TOINT(reference1)
	_amt = TOINT(reference0)
	_thisitem = ToolsData[_index]
	
	
	while _amt > 0 && toolsarray[_index] > 0{
			pancakes += TOINT(_thisitem[2] * toolsarray[_index])
			toolsarray[_index] = (TOINT(toolsarray[_index]) - 1)
			_amt--
	}
	

	"%(OnToolsMenu)\![unlock,balloonrepaint]"

}




//reference0 is index
OnToolInfo : all {
	"\_q"
	_index = reference0
	_thisitem =  ToolsData[_index]
	"\f[bold,1]%_thisitem[0] \f[bold,0](Own: %toolsarray[_index])\n\n[half]"
	"  \f[italic,1]%_thisitem[5]\f[italic,0]\n\n[half]"
	if _index == 0{
		"Each click is worth %FormatTwoDec(clickmultiplier)."
	}else{
		"Upgrades are giving this a multiplier of %FormatTwoDec(pertoolmult[_index])."
	}
	
	
	"\n\n%(nvm)   \![*]\q[Back,OnToolsMenu]"

}





OnPhoneBuy{
	_index = TOINT(reference0)
	_thisitem = ToolsData[_index]
	toolsarray[_index] = (TOINT(toolsarray[_index]) + 1)
	pancakes -= TOINT(_thisitem[2] * toolsarray[_index])
	
	"%(OnToolsMenu)\![unlock,balloonrepaint]"
	--
	//random achievements
	if toolsarray[0] == 1 ||toolsarray[0] == 10 ||toolsarray[0] == 100 ||toolsarray[0] == 1000 ||toolsarray[0] == 10000 ||toolsarray[0] == 100000 ||toolsarray[0] == 1000000{
		_rand = RAND(ARRAYSIZE(CallFriendShinyData))
	//	PhoneAchievement(_rand)
		callfriendarray[_rand] += 1
	
	}
	
}


PhoneAchievement{
	_index = TOINT(_argv[0])
	
	if callfriendarray[_index] == 0{
		callfriendarray[_index] += 1
		_shiny = CallFriendShinyData[_index]
		"\C%(shelf)\b[6]Congratulations! You've earned the %(_shiny[0]) shiny!\x\0"
	}
	
}

AchievementPopup{
	_index = TOINT(_argv[0])
	_database = "ShinyData" + origin
	_thisitem = EVAL("%(_database)[_index]")
	if _thisitem == ""{
		_thisitem = ShinyDataNormal[_index]
	}
	if shiniesarray[_index] == 0{
		shiniesarray[_index] += 1
		"\C%(shelf)\b[6]Congratulations! You've earned the %(_thisitem[0]) shiny!\x\0"
	}
	
}

